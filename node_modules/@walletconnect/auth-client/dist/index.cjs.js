"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var w=require("@walletconnect/core"),T=require("@walletconnect/logger"),J=require("events"),Y=require("pino"),y=require("@walletconnect/jsonrpc-utils"),f=require("@walletconnect/time"),g=require("@walletconnect/utils"),L=require("@ethersproject/hash"),G=require("@ethersproject/transactions"),B=require("isomorphic-unfetch"),k=require("@stablelib/random");function O(r){return r&&typeof r=="object"&&"default"in r?r:{default:r}}var Z=O(Y),Q=O(B);class S{constructor(i){this.client=i}}class U{constructor(i){this.opts=i}}const K="https://rpc.walletconnect.com/v1",m={wc_authRequest:{req:{ttl:f.ONE_DAY,prompt:!0,tag:3e3},res:{ttl:f.ONE_DAY,prompt:!1,tag:3001}}},q="wc",x=1,D="auth",A="authClient",R=`${q}@${1}:${D}:`,v=`${R}:PUB_KEY`,W="expirer",ee={created:"expirer_created",deleted:"expirer_deleted",expired:"expirer_expired",sync:"expirer_sync"},te="0.3",ie=f.ONE_DAY;function C(r){return r?.split(":")}function se(r){const i=r&&C(r);if(i)return i[3]}function re(r){const i=r&&C(r);if(i)return i[2]+":"+i[3]}function $(r){const i=r&&C(r);if(i)return i.pop()}function j(r){return r.getAll().filter(i=>"requester"in i)}function M(r,i){return j(r).find(e=>e.id===i)}function ne(r){const i=g.isValidUrl(r.aud),e=new RegExp(`${r.domain}`).test(r.aud),t=!!r.nonce,s=r.type?r.type==="eip4361":!0;return!!(i&&e&&t&&s)}function oe(r,i){return!!M(i,r.id)}async function ae(r,i,e,t,s){switch(e.t){case"eip191":return ce(r,i,e.s);case"eip1271":return await le(r,i,e.s,t,s);default:throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${e.t}`)}}function ce(r,i,e){return G.recoverAddress(L.hashMessage(i),e).toLowerCase()===r.toLowerCase()}async function le(r,i,e,t,s){try{const n="0x1626ba7e",o="0000000000000000000000000000000000000000000000000000000000000040",a="0000000000000000000000000000000000000000000000000000000000000041",l=e.substring(2),c=L.hashMessage(i).substring(2),h=n+c+o+a+l,d=await Q.default(`${K}/?chainId=${t}&projectId=${s}`,{method:"POST",body:JSON.stringify({id:ue(),jsonrpc:"2.0",method:"eth_call",params:[{to:r,data:h},"latest"]})}),{result:u}=await d.json();return u?u.slice(0,n.length).toLowerCase()===n.toLowerCase():!1}catch(n){return console.error("isValidEip1271Signature: ",n),!1}}function ue(){return Date.now()+Math.floor(Math.random()*1e3)}var he=Object.defineProperty,X=Object.getOwnPropertySymbols,de=Object.prototype.hasOwnProperty,ge=Object.prototype.propertyIsEnumerable,V=(r,i,e)=>i in r?he(r,i,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[i]=e,z=(r,i)=>{for(var e in i||(i={}))de.call(i,e)&&V(r,e,i[e]);if(X)for(var e of X(i))ge.call(i,e)&&V(r,e,i[e]);return r};class pe extends S{constructor(i){super(i),this.initialized=!1,this.name="authEngine",this.init=()=>{this.initialized||(this.registerRelayerEvents(),this.client.core.pairing.register({methods:Object.keys(m)}),this.initialized=!0)},this.request=async(e,t)=>{if(this.isInitialized(),!ne(e))throw new Error("Invalid request");const{chainId:s,statement:n,aud:o,domain:a,nonce:l,type:c}=e,h=Boolean(t?.topic)&&this.client.core.pairing.pairings.getAll({active:!0}).some(_=>_.topic===t?.topic),d={protocol:w.RELAYER_DEFAULT_PROTOCOL},u=g.calcExpiry(f.FIVE_MINUTES),E=await this.client.core.crypto.generateKeyPair();if(h){const _=this.client.core.pairing.pairings.getAll({active:!0}).find(H=>H.topic===t?.topic);if(!_)throw new Error(`Could not find pairing for provided topic ${t?.topic}`);await this.sendRequest(_.topic,"wc_authRequest",{payloadParams:{type:c??"eip4361",chainId:s,statement:n,aud:o,domain:a,version:"1",nonce:l,iat:new Date().toISOString()},requester:{publicKey:E,metadata:this.client.metadata}}),this.client.logger.debug("sent request to existing pairing")}const b=g.generateRandomBytes32(),p=await this.client.core.crypto.setSymKey(b),P={topic:p,expiry:u,relay:d,active:!1};await this.client.core.pairing.pairings.set(p,P),this.client.logger.debug("Generated new pairing",P),this.setExpiry(p,u),this.client.authKeys.set(v,{publicKey:E});const N=g.hashKey(E);await this.client.pairingTopics.set(N,{pairingTopic:p}),await this.client.core.relayer.subscribe(p),await this.client.core.relayer.subscribe(N),this.client.logger.debug("sending request to potential pairing");const F=await this.sendRequest(p,"wc_authRequest",{payloadParams:{type:c??"eip4361",chainId:s,statement:n,aud:o,domain:a,version:"1",nonce:l,iat:new Date().toISOString()},requester:{publicKey:E,metadata:this.client.metadata}});return this.client.logger.debug("sent request to potential pairing"),{uri:g.formatUri({protocol:this.client.protocol,version:this.client.core.version,topic:p,symKey:b,relay:d}),id:F}},this.respond=async e=>{if(this.isInitialized(),!oe(e,this.client.requests))throw new Error("Invalid response");const t=M(this.client.requests,e.id),s=t.requester.publicKey,n=await this.client.core.crypto.generateKeyPair(),o=g.hashKey(s),a={type:g.TYPE_1,receiverPublicKey:s,senderPublicKey:n};if("error"in e){await this.sendError(t.id,o,e,a);return}const l={h:{t:"eip4361"},p:t.cacaoPayload,s:e.signature},c=await this.sendResult(t.id,o,l,a);await this.client.requests.set(c,z({id:c},l))},this.getPendingRequests=()=>j(this.client.requests),this.setExpiry=async(e,t)=>{this.client.core.pairing.pairings.keys.includes(e)&&await this.client.core.pairing.updateExpiry({topic:e,expiry:t}),this.client.core.expirer.set(e,t)},this.sendRequest=async(e,t,s,n)=>{const o=y.formatJsonRpcRequest(t,s),a=await this.client.core.crypto.encode(e,o,n),l=m[t].req;return this.client.core.history.set(e,o),await this.client.core.relayer.publish(e,a,l),o.id},this.sendResult=async(e,t,s,n)=>{const o=y.formatJsonRpcResult(e,s),a=await this.client.core.crypto.encode(t,o,n),l=await this.client.core.history.get(t,e),c=m[l.request.method].res;return await this.client.core.relayer.publish(t,a,c),await this.client.core.history.resolve(o),o.id},this.sendError=async(e,t,s,n)=>{const o=y.formatJsonRpcError(e,s.error),a=await this.client.core.crypto.encode(t,o,n),l=await this.client.core.history.get(t,e),c=m[l.request.method].res;return await this.client.core.relayer.publish(t,a,c),await this.client.core.history.resolve(o),o.id},this.onRelayEventRequest=e=>{const{topic:t,payload:s}=e,n=s.method;switch(n){case"wc_authRequest":return this.onAuthRequest(t,s);default:return this.client.logger.info(`Unsupported request method ${n}`)}},this.onRelayEventResponse=async e=>{const{topic:t,payload:s}=e,n=(await this.client.core.history.get(t,s.id)).request.method;switch(n){case"wc_authRequest":return this.onAuthResponse(t,s);default:return this.client.logger.info(`Unsupported response method ${n}`)}},this.constructEip4361Message=e=>{this.client.logger.debug("constructEip4361Message, cacao is:",e);const t=`${e.domain} wants you to sign in with your Ethereum account:`,s=$(e.iss),n=e.statement,o=`URI: ${e.aud}`,a=`Version: ${e.version}`,l=`Chain ID: ${se(e.iss)}`,c=`Nonce: ${e.nonce}`,h=`Issued At: ${e.iat}`,d=e.resources&&e.resources.length>0?`Resources:
${e.resources.map(u=>`- ${u}`).join(`
`)}`:void 0;return[t,s,"",n,"",o,a,l,c,h,d].filter(u=>u!=null).join(`
`)},this.onAuthRequest=async(e,t)=>{const{requester:s,payloadParams:{resources:n,statement:o,aud:a,domain:l,version:c,nonce:h,iat:d}}=t.params;this.client.logger.debug("onAuthRequest:",e,t);try{const u={iss:this.client.address||"",aud:a,domain:l,version:c,nonce:h,iat:d,statement:o,resources:n},E=this.constructEip4361Message(u);await this.client.requests.set(t.id,{requester:s,id:t.id,message:E,cacaoPayload:u}),this.client.emit("auth_request",{id:t.id,topic:e,params:{requester:s,message:this.constructEip4361Message(u)}})}catch(u){await this.sendError(t.id,e,u),this.client.logger.error(u)}},this.onAuthResponse=async(e,t)=>{const{id:s}=t;if(this.client.logger.debug("onAuthResponse",e,t),y.isJsonRpcResult(t)){const{pairingTopic:n}=this.client.pairingTopics.get(e);await this.client.core.pairing.activate({topic:n});const{s:o,p:a}=t.result;await this.client.requests.set(s,z({id:s},t.result));const l=this.constructEip4361Message(a);this.client.logger.debug(`reconstructed message:
`,JSON.stringify(l)),this.client.logger.debug("payload.iss:",a.iss),this.client.logger.debug("signature:",o);const c=$(a.iss),h=re(a.iss);if(!c)throw new Error("Could not derive address from `payload.iss`");if(!h)throw new Error("Could not derive chainId from `payload.iss`");this.client.logger.debug("walletAddress extracted from `payload.iss`:",c),await ae(c,l,o,h,this.client.projectId)?this.client.emit("auth_response",{id:s,topic:e,params:t}):this.client.emit("auth_response",{id:s,topic:e,params:{message:"Invalid signature",code:-1}})}else y.isJsonRpcError(t)&&this.client.emit("auth_response",{id:s,topic:e,params:t})}}isInitialized(){if(!this.initialized){const{message:i}=g.getInternalError("NOT_INITIALIZED",this.name);throw new Error(i)}}registerRelayerEvents(){this.client.core.relayer.on(w.RELAYER_EVENTS.message,async i=>{const{topic:e,message:t}=i,s=this.client.authKeys.keys.includes(v)?this.client.authKeys.get(v).publicKey:"",n=s?{receiverPublicKey:s}:{},o=await this.client.core.crypto.decode(e,t,n);y.isJsonRpcRequest(o)?(this.client.core.history.set(e,o),this.onRelayEventRequest({topic:e,payload:o})):y.isJsonRpcResponse(o)&&(await this.client.core.history.resolve(o),this.onRelayEventResponse({topic:e,payload:o}))})}}class I extends U{constructor(i){super(i),this.protocol=q,this.version=x,this.name=A,this.events=new J.EventEmitter,this.emit=(t,s)=>this.events.emit(t,s),this.on=(t,s)=>this.events.on(t,s),this.once=(t,s)=>this.events.once(t,s),this.off=(t,s)=>this.events.off(t,s),this.removeListener=(t,s)=>this.events.removeListener(t,s),this.request=async(t,s)=>{try{return await this.engine.request(t,s)}catch(n){throw this.logger.error(n.message),n}},this.respond=async t=>{try{return await this.engine.respond(t)}catch(s){throw this.logger.error(s.message),s}},this.getPendingRequests=()=>{try{return this.engine.getPendingRequests()}catch(t){throw this.logger.error(t.message),t}};const e=typeof i.logger<"u"&&typeof i.logger!="string"?i.logger:Z.default(T.getDefaultLoggerOptions({level:i.logger||"error"}));this.name=i?.name||A,this.metadata=i.metadata,this.address=i.iss,this.projectId=i.projectId,this.core=i.core||new w.Core(i),this.logger=T.generateChildLogger(e,this.name),this.authKeys=new w.Store(this.core,this.logger,"authKeys",R),this.pairingTopics=new w.Store(this.core,this.logger,"pairingTopics",R),this.requests=new w.Store(this.core,this.logger,"requests",R),this.engine=new pe(this)}static async init(i){const e=new I(i);return await e.initialize(),e}get context(){return T.getLoggerContext(this.logger)}async initialize(){this.logger.trace("Initialized");try{await this.core.start(),await this.authKeys.init(),await this.requests.init(),await this.pairingTopics.init(),await this.engine.init(),this.logger.info("AuthClient Initialization Success")}catch(i){throw this.logger.info("AuthClient Initialization Failure"),this.logger.error(i.message),i}}}function ye(){return k.randomStringForEntropy(96)}const Ee=I;exports.AUTH_CLIENT_CONTEXT=D,exports.AUTH_CLIENT_DEFAULT_NAME=A,exports.AUTH_CLIENT_PROTOCOL=q,exports.AUTH_CLIENT_PUBLIC_KEY_NAME=v,exports.AUTH_CLIENT_STORAGE_PREFIX=R,exports.AUTH_CLIENT_VERSION=x,exports.AuthClient=Ee,exports.DEFAULT_RPC_URL=K,exports.ENGINE_RPC_OPTS=m,exports.EXPIRER_CONTEXT=W,exports.EXPIRER_DEFAULT_TTL=ie,exports.EXPIRER_EVENTS=ee,exports.EXPIRER_STORAGE_VERSION=te,exports.IAuthClient=U,exports.IAuthEngine=S,exports.default=I,exports.generateNonce=ye;
//# sourceMappingURL=index.cjs.js.map
